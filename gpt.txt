// client/src/chat.c

#include "../include/chat.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <arpa/inet.h>

#define MESSAGE_BUFFER 1024
#define USERNAME_BUFFER 50

typedef struct {
    int socket;
    char username[USERNAME_BUFFER];
} chat_thread_data;

// Hàm nhận tin nhắn từ server
void *receive_messages(void *arg) {
    chat_thread_data *data = (chat_thread_data *)arg;
    int sock = data->socket;
    char buffer[MESSAGE_BUFFER];

    while (1) {
        memset(buffer, 0, sizeof(buffer));
        ssize_t bytesReceived = recv(sock, buffer, sizeof(buffer), 0);
        if (bytesReceived <= 0) {
            printf("Đã ngắt kết nối từ server.\n");
            break;
        }
        printf("\n%s", buffer);
        printf(">> ");
        fflush(stdout);
    }
    return NULL;
}

int init_chat(const char *server_ip, int port, const char *username) {
    int sock;
    struct sockaddr_in server_address;

    // Tạo socket TCP
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        handle_error("Không thể tạo socket");
    }

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(port);

    // Chuyển đổi địa chỉ IP
    if (inet_pton(AF_INET, server_ip, &server_address.sin_addr) <= 0) {
        handle_error("Địa chỉ IP không hợp lệ");
    }

    // Kết nối đến server
    if (connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        handle_error("Kết nối đến server thất bại");
    }

    // Gửi username đến server
    send(sock, username, strlen(username), 0);

    printf("Đã kết nối đến server.\n");

    // Tạo thread để nhận tin nhắn
    pthread_t recv_thread;
    chat_thread_data data;
    data.socket = sock;
    strncpy(data.username, username, USERNAME_BUFFER - 1);
    pthread_create(&recv_thread, NULL, receive_messages, (void *)&data);

    // Trả về socket để tiếp tục gửi tin nhắn
    return sock;
}

void send_private_message(int sock, const char *recipient, const char *message) {
    char buffer[MESSAGE_BUFFER];
    snprintf(buffer, sizeof(buffer), "PRIVATE %s: %s", recipient, message);
    send(sock, buffer, strlen(buffer), 0);
}

void handle_chat(int sock, const char *username) {
    char input[MESSAGE_BUFFER];
    char recipient[USERNAME_BUFFER];
    char message[MESSAGE_BUFFER];

    printf("Nhập tin nhắn dưới định dạng: <username> <message>\n");
    printf("Ví dụ: Alice Hello!\n");

    while (1) {
        printf(">> ");
        fgets(input, sizeof(input), stdin);

        // Kiểm tra nếu người dùng muốn thoát
        if (strncmp(input, "Exit", 4) == 0) {
            printf("Đang thoát...\n");
            close(sock);
            exit(0);
        }

        // Tách recipient và message
        char *space = strchr(input, ' ');
        if (space == NULL) {
            printf("Định dạng không hợp lệ. Vui lòng thử lại.\n");
            continue;
        }

        size_t recipient_len = space - input;
        strncpy(recipient, input, recipient_len);
        recipient[recipient_len] = '\0';

        strncpy(message, space + 1, sizeof(message) - 1);
        message[strcspn(message, "\n")] = '\0'; // Loại bỏ ký tự newline

        send_private_message(sock, recipient, message);
    }
}

// client/src/file.c

#include "../include/file.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>

#define BUFFER_SIZE 1024

int init_file(int sock, const char *username) {
    // Không cần khởi tạo gì đặc biệt tại client cho file
    return 0;
}

void upload_file(int sock, const char *file_path, const char *receiver, bool is_group) {
    char buffer[BUFFER_SIZE];
    if (is_group) {
        snprintf(buffer, sizeof(buffer), "UPLOAD_GROUP %s %s", receiver, file_path);
    } else {
        snprintf(buffer, sizeof(buffer), "UPLOAD_PRIVATE %s %s", receiver, file_path);
    }
    send(sock, buffer, strlen(buffer), 0);

    // Gửi file
    FILE *fp = fopen(file_path, "rb");
    if (!fp) {
        printf("Không thể mở file %s để tải lên.\n", file_path);
        return;
    }

    // Lấy kích thước file
    fseek(fp, 0, SEEK_END);
    uint64_t filesize = ftell(fp);
    fseek(fp, 0, SEEK_SET);

    uint64_t filesize_net = htonll(filesize);
    send_all(sock, &filesize_net, sizeof(filesize_net));

    // Gửi nội dung file
    char file_buffer[BUFFER_SIZE];
    size_t bytesRead;
    while ((bytesRead = fread(file_buffer, 1, sizeof(file_buffer), fp)) > 0) {
        if (send_all(sock, file_buffer, bytesRead) != 0) {
            printf("Lỗi khi gửi dữ liệu file.\n");
            fclose(fp);
            return;
        }
    }
    fclose(fp);
    printf("Đã tải lên file %s thành công.\n", file_path);
}

void download_file(int sock, const char *file_name, const char *save_path) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "DOWNLOAD %s", file_name);
    send(sock, buffer, strlen(buffer), 0);

    // Nhận kích thước file
    uint64_t filesize_net;
    if (recv_all(sock, &filesize_net, sizeof(filesize_net)) <= 0) {
        printf("Lỗi khi nhận kích thước file.\n");
        return;
    }
    uint64_t filesize = ntohll(filesize_net);

    // Nhận nội dung file
    FILE *fp = fopen(save_path, "wb");
    if (!fp) {
        printf("Không thể tạo file %s để lưu.\n", save_path);
        return;
    }

    char file_buffer[BUFFER_SIZE];
    uint64_t totalReceived = 0;
    while (totalReceived < filesize) {
        size_t bytesToReceive = (filesize - totalReceived) < BUFFER_SIZE ? (filesize - totalReceived) : BUFFER_SIZE;
        ssize_t bytesReceived = recv_all(sock, file_buffer, bytesToReceive);
        if (bytesReceived <= 0) {
            printf("Lỗi khi nhận dữ liệu file.\n");
            fclose(fp);
            return;
        }
        fwrite(file_buffer, 1, bytesReceived, fp);
        totalReceived += bytesReceived;
    }
    fclose(fp);
    printf("Đã tải xuống file %s thành công.\n", file_name);
}

void search_files(int sock, const char *query) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "SEARCH %s", query);
    send(sock, buffer, strlen(buffer), 0);

    // Nhận kết quả tìm kiếm
    printf("Kết quả tìm kiếm:\n");
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        ssize_t bytesReceived = recv(sock, buffer, sizeof(buffer) - 1, 0);
        if (bytesReceived <= 0) {
            break;
        }
        buffer[bytesReceived] = '\0';
        if (strcmp(buffer, "END_OF_RESULTS") == 0) {
            break;
        }
        printf("%s\n", buffer);
    }
}

void upload_directory(int sock, const char *dir_path, const char *receiver, bool is_group) {
    // Gửi lệnh tải lên thư mục
    char buffer[BUFFER_SIZE];
    if (is_group) {
        snprintf(buffer, sizeof(buffer), "UPLOAD_DIR_GROUP %s %s", receiver, dir_path);
    } else {
        snprintf(buffer, sizeof(buffer), "UPLOAD_DIR_PRIVATE %s %s", receiver, dir_path);
    }
    send(sock, buffer, strlen(buffer), 0);

    // Đệ quy tải lên các file và thư mục con
    DIR *d = opendir(dir_path);
    if (!d) {
        printf("Không thể mở thư mục %s.\n", dir_path);
        return;
    }

    struct dirent *dir;
    while ((dir = readdir(d)) != NULL) {
        if (strcmp(dir->d_name, ".") == 0 || strcmp(dir->d_name, "..") == 0)
            continue;
        char path[BUFFER_SIZE];
        snprintf(path, sizeof(path), "%s/%s", dir_path, dir->d_name);

        struct stat st;
        stat(path, &st);
        if (S_ISDIR(st.st_mode)) {
            // Đệ quy tải lên thư mục con
            upload_directory(sock, path, receiver, is_group);
        } else if (S_ISREG(st.st_mode)) {
            // Tải lên file
            upload_file(sock, path, receiver, is_group);
        }
    }
    closedir(d);
    printf("Đã tải lên thư mục %s thành công.\n", dir_path);
}

void download_directory(int sock, const char *dir_name, const char *save_path) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "DOWNLOAD_DIR %s", dir_name);
    send(sock, buffer, strlen(buffer), 0);

    // Nhận dữ liệu thư mục
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        ssize_t bytesReceived = recv(sock, buffer, sizeof(buffer) - 1, 0);
        if (bytesReceived <= 0) {
            printf("Lỗi khi nhận dữ liệu thư mục.\n");
            break;
        }
        buffer[bytesReceived] = '\0';

        if (strcmp(buffer, "END_OF_DIR") == 0) {
            break;
        }

        // Xử lý tạo thư mục hoặc nhận file
        if (strncmp(buffer, "MKDIR ", 6) == 0) {
            char dir_to_create[BUFFER_SIZE];
            sscanf(buffer + 6, "%s", dir_to_create);
            mkdir(dir_to_create, 0777);
            printf("Đã tạo thư mục %s.\n", dir_to_create);
        } else if (strncmp(buffer, "FILE ", 5) == 0) {
            char file_name[BUFFER_SIZE];
            sscanf(buffer + 5, "%s", file_name);
            char save_file_path[BUFFER_SIZE];
            snprintf(save_file_path, sizeof(save_file_path), "%s/%s", save_path, file_name);
            download_file(sock, file_name, save_file_path);
        }
    }
    printf("Đã tải xuống thư mục %s thành công.\n", dir_name);
}
// client/src/group.c

#include "../include/group.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int init_group(int sock, const char *username) {
    // Không cần khởi tạo gì đặc biệt tại client cho nhóm
    return 0;
}

void create_group(int sock, const char *group_name) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "CREATE_GROUP %s", group_name);
    send(sock, buffer, strlen(buffer), 0);
}

void join_group(int sock, const char *group_name) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "JOIN_GROUP %s", group_name);
    send(sock, buffer, strlen(buffer), 0);
}

void leave_group(int sock, const char *group_name) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "LEAVE_GROUP %s", group_name);
    send(sock, buffer, strlen(buffer), 0);
}

void send_group_message(int sock, const char *group_name, const char *message) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "SEND %s %s", group_name, message);
    send(sock, buffer, strlen(buffer), 0);
}

void add_member(int sock, const char *group_name, const char *member_username) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "ADD_MEMBER %s %s", group_name, member_username);
    send(sock, buffer, strlen(buffer), 0);
}

void remove_member(int sock, const char *group_name, const char *member_username) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "REMOVE_MEMBER %s %s", group_name, member_username);
    send(sock, buffer, strlen(buffer), 0);
}

void list_groups(int sock) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "LIST_GROUPS");
    send(sock, buffer, strlen(buffer), 0);
}

void list_users(int sock) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, sizeof(buffer), "LIST_USERS");
    send(sock, buffer, strlen(buffer), 0);
}

// client/src/main.c

#include "../include/chat.h"
#include "../include/group.h"
#include "../include/file.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define CHAT_PORT 8085
#define GROUP_PORT 8086
#define FILE_PORT 8087
#define BUFFER_SIZE 1024
#define MESSAGE_BUFFER 1024
#define USERNAME_BUFFER 254

int main() {
    char username[50];
    char password[50];
    char email[100];
    int choice;
    int chat_sock, group_sock, file_sock;

    printf("==== Đăng Ký / Đăng Nhập ====\n");
    printf("1. Đăng ký\n2. Đăng nhập\nLựa chọn: ");
    if (scanf("%d", &choice) != 1) {
        printf("Lựa chọn không hợp lệ.\n");
        exit(EXIT_FAILURE);
    }
    getchar(); // Xóa ký tự newline

    // Kết nối đến server để đăng ký hoặc đăng nhập
    int auth_sock;
    struct sockaddr_in server_address;
    auth_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (auth_sock < 0) {
        handle_error("Không thể tạo socket");
    }

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(CHAT_PORT);
    if (inet_pton(AF_INET, SERVER_IP, &server_address.sin_addr) <= 0) {
        handle_error("Địa chỉ IP không hợp lệ");
    }

    if (connect(auth_sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        handle_error("Kết nối đến server thất bại");
    }

    if (choice == 1) {
        // Đăng ký
        printf("Nhập tên người dùng: ");
        if (fgets(username, sizeof(username), stdin) == NULL) {
            printf("Đọc tên người dùng thất bại.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
        username[strcspn(username, "\n")] = 0;

        printf("Nhập mật khẩu: ");
        if (fgets(password, sizeof(password), stdin) == NULL) {
            printf("Đọc mật khẩu thất bại.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
        password[strcspn(password, "\n")] = 0;

        printf("Nhập email: ");
        if (fgets(email, sizeof(email), stdin) == NULL) {
            printf("Đọc email thất bại.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
        email[strcspn(email, "\n")] = 0;

        // Gửi yêu cầu đăng ký đến server
        char register_buffer[BUFFER_SIZE];
        snprintf(register_buffer, sizeof(register_buffer), "REGISTER %s %s %s", username, password, email);
        if (send(auth_sock, register_buffer, strlen(register_buffer), 0) < 0) {
            handle_error("Gửi yêu cầu đăng ký thất bại");
        }

        // Nhận phản hồi từ server
        char response[BUFFER_SIZE];
        ssize_t bytesReceived = recv(auth_sock, response, sizeof(response) - 1, 0);
        if (bytesReceived > 0) {
            response[bytesReceived] = '\0';
            // Loại bỏ ký tự dòng mới nếu có
            response[strcspn(response, "\n")] = 0;
            printf("Server: %s\n", response);
            if (strcmp(response, "RegisterSuccess") == 0) {
                printf("Đăng ký thành công! Bạn có thể đăng nhập ngay.\n");
            } else {
                printf("Đăng ký thất bại: %s\n", response);
                close(auth_sock);
                exit(0);
            }
        } else {
            printf("Không nhận được phản hồi từ server.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
    } else if (choice == 2) {
        // Đăng nhập
        printf("Nhập tên người dùng: ");
        if (fgets(username, sizeof(username), stdin) == NULL) {
            printf("Đọc tên người dùng thất bại.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
        username[strcspn(username, "\n")] = 0;

        printf("Nhập mật khẩu: ");
        if (fgets(password, sizeof(password), stdin) == NULL) {
            printf("Đọc mật khẩu thất bại.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
        password[strcspn(password, "\n")] = 0;

        // Gửi yêu cầu đăng nhập đến server
        char login_buffer[BUFFER_SIZE];
        snprintf(login_buffer, sizeof(login_buffer), "LOGIN %s %s", username, password);
        if (send(auth_sock, login_buffer, strlen(login_buffer), 0) < 0) {
            handle_error("Gửi yêu cầu đăng nhập thất bại");
        }

        // Nhận phản hồi từ server
        char response[BUFFER_SIZE];
        ssize_t bytesReceived = recv(auth_sock, response, sizeof(response) - 1, 0);
        if (bytesReceived > 0) {
            response[bytesReceived] = '\0';
            // Loại bỏ ký tự dòng mới nếu có
            response[strcspn(response, "\n")] = 0;
            printf("Server: %s\n", response);
            if (strcmp(response, "LoginSuccess") == 0) {
                printf("Đăng nhập thành công!\n");
            } else {
                printf("Đăng nhập thất bại: %s\n", response);
                close(auth_sock);
                exit(0);
            }
        } else {
            printf("Không nhận được phản hồi từ server.\n");
            close(auth_sock);
            exit(EXIT_FAILURE);
        }
    } else {
        printf("Lựa chọn không hợp lệ.\n");
        close(auth_sock);
        exit(0);
    }

    close(auth_sock);

    // Khởi tạo kết nối cho chat, group, và file
    chat_sock = init_chat(SERVER_IP, CHAT_PORT, username);
    if (chat_sock < 0) {
        handle_error("Không thể kết nối chat");
    }

    group_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (group_sock < 0) {
        handle_error("Không thể tạo socket cho group");
    }

    struct sockaddr_in group_address;
    group_address.sin_family = AF_INET;
    group_address.sin_port = htons(GROUP_PORT);
    if (inet_pton(AF_INET, SERVER_IP, &group_address.sin_addr) <= 0) {
        handle_error("Địa chỉ IP không hợp lệ cho group");
    }

    if (connect(group_sock, (struct sockaddr *)&group_address, sizeof(group_address)) < 0) {
        handle_error("Kết nối đến server group thất bại");
    }

    // Gửi username đến server group
    if (send(group_sock, username, strlen(username), 0) < 0) {
        handle_error("Gửi username đến server group thất bại");
    }

    file_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (file_sock < 0) {
        handle_error("Không thể tạo socket cho file");
    }

    struct sockaddr_in file_address;
    file_address.sin_family = AF_INET;
    file_address.sin_port = htons(FILE_PORT);
    if (inet_pton(AF_INET, SERVER_IP, &file_address.sin_addr) <= 0) {
        handle_error("Địa chỉ IP không hợp lệ cho file");
    }

    if (connect(file_sock, (struct sockaddr *)&file_address, sizeof(file_address)) < 0) {
        handle_error("Kết nối đến server file thất bại");
    }

    // Gửi username đến server file
    if (send(file_sock, username, strlen(username), 0) < 0) {
        handle_error("Gửi username đến server file thất bại");
    }

    // Khởi tạo kết nối cho group và file (nếu cần thiết)
    init_group(group_sock, username);
    init_file(file_sock, username);

    int main_choice;
    while (1) {
        printf("\n==== Menu Chính ====\n");
        printf("1. Chat 1-1\n");
        printf("2. Chat Nhóm\n");
        printf("3. Chia Sẻ File\n");
        printf("4. Tìm Kiếm File\n");
        printf("5. Thoát\n");
        printf("Lựa chọn: ");
        if (scanf("%d", &main_choice) != 1) {
            printf("Lựa chọn không hợp lệ.\n");
            while (getchar() != '\n'); // Xóa bộ đệm nhập
            continue;
        }
        getchar(); // Xóa ký tự newline

        if (main_choice == 1) {
            // Chat 1-1
            char recipient[USERNAME_BUFFER];
            char message[MESSAGE_BUFFER];
            printf("Nhập tên người dùng muốn nhắn tin: ");
            if (fgets(recipient, sizeof(recipient), stdin) == NULL) {
                printf("Đọc tên người nhận thất bại.\n");
                continue;
            }
            recipient[strcspn(recipient, "\n")] = 0;

            printf("Nhập tin nhắn: ");
            if (fgets(message, sizeof(message), stdin) == NULL) {
                printf("Đọc tin nhắn thất bại.\n");
                continue;
            }
            message[strcspn(message, "\n")] = 0;

            send_private_message(chat_sock, recipient, message);
        } else if (main_choice == 2) {
            // Chat Nhóm
            int group_choice;
            printf("\n==== Chat Nhóm ====\n");
            printf("1. Tạo nhóm\n");
            printf("2. Tham gia nhóm\n");
            printf("3. Rời nhóm\n");
            printf("4. Gửi tin nhắn nhóm\n");
            printf("5. Thêm thành viên vào nhóm\n");
            printf("6. Xóa thành viên khỏi nhóm\n");
            printf("7. Liệt kê các nhóm\n");
            printf("8. Liệt kê người dùng\n");
            printf("9. Quay lại Menu Chính\n");
            printf("Lựa chọn: ");
            if (scanf("%d", &group_choice) != 1) {
                printf("Lựa chọn không hợp lệ.\n");
                while (getchar() != '\n'); // Xóa bộ đệm nhập
                continue;
            }
            getchar(); // Xóa ký tự newline

            if (group_choice == 1) {
                char group_name[BUFFER_SIZE];
                printf("Nhập tên nhóm: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;
                create_group(group_sock, group_name);
            } else if (group_choice == 2) {
                char group_name[BUFFER_SIZE];
                printf("Nhập tên nhóm để tham gia: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;
                join_group(group_sock, group_name);
            } else if (group_choice == 3) {
                char group_name[BUFFER_SIZE];
                printf("Nhập tên nhóm để rời: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;
                leave_group(group_sock, group_name);
            } else if (group_choice == 4) {
                char group_name[BUFFER_SIZE];
                char message[MESSAGE_BUFFER];
                printf("Nhập tên nhóm: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;

                printf("Nhập tin nhắn: ");
                if (fgets(message, sizeof(message), stdin) == NULL) {
                    printf("Đọc tin nhắn thất bại.\n");
                    continue;
                }
                message[strcspn(message, "\n")] = 0;

                send_group_message(group_sock, group_name, message);
            } else if (group_choice == 5) {
                char group_name[BUFFER_SIZE];
                char member_username[USERNAME_BUFFER];
                printf("Nhập tên nhóm: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;

                printf("Nhập tên người dùng cần thêm: ");
                if (fgets(member_username, sizeof(member_username), stdin) == NULL) {
                    printf("Đọc tên người dùng thất bại.\n");
                    continue;
                }
                member_username[strcspn(member_username, "\n")] = 0;

                add_member(group_sock, group_name, member_username);
            } else if (group_choice == 6) {
                char group_name[BUFFER_SIZE];
                char member_username[USERNAME_BUFFER];
                printf("Nhập tên nhóm: ");
                if (fgets(group_name, sizeof(group_name), stdin) == NULL) {
                    printf("Đọc tên nhóm thất bại.\n");
                    continue;
                }
                group_name[strcspn(group_name, "\n")] = 0;

                printf("Nhập tên người dùng cần xóa: ");
                if (fgets(member_username, sizeof(member_username), stdin) == NULL) {
                    printf("Đọc tên người dùng thất bại.\n");
                    continue;
                }
                member_username[strcspn(member_username, "\n")] = 0;

                remove_member(group_sock, group_name, member_username);
            } else if (group_choice == 7) {
                list_groups(group_sock);
            } else if (group_choice == 8) {
                list_users(group_sock);
            } else if (group_choice == 9) {
                continue;
            } else {
                printf("Lựa chọn không hợp lệ.\n");
            }
        } else if (main_choice == 3) {
            // Chia Sẻ File
            int file_choice;
            printf("\n==== Chia Sẻ File ====\n");
            printf("1. Tải lên file\n");
            printf("2. Tải xuống file\n");
            printf("3. Tải lên thư mục\n");
            printf("4. Tải xuống thư mục\n");
            printf("5. Quay lại Menu Chính\n");
            printf("Lựa chọn: ");
            if (scanf("%d", &file_choice) != 1) {
                printf("Lựa chọn không hợp lệ.\n");
                while (getchar() != '\n'); // Xóa bộ đệm nhập
                continue;
            }
            getchar(); // Xóa ký tự newline

            if (file_choice == 1) {
                char file_path[BUFFER_SIZE];
                char receiver[USERNAME_BUFFER];
                int is_group;
                printf("1. Gửi tới người dùng\n2. Gửi tới nhóm\nLựa chọn: ");
                if (scanf("%d", &is_group) != 1) {
                    printf("Lựa chọn không hợp lệ.\n");
                    while (getchar() != '\n'); // Xóa bộ đệm nhập
                    continue;
                }
                getchar();

                printf("Nhập tên người dùng hoặc tên nhóm: ");
                if (fgets(receiver, sizeof(receiver), stdin) == NULL) {
                    printf("Đọc tên người nhận thất bại.\n");
                    continue;
                }
                receiver[strcspn(receiver, "\n")] = 0;

                printf("Nhập đường dẫn file: ");
                if (fgets(file_path, sizeof(file_path), stdin) == NULL) {
                    printf("Đọc đường dẫn file thất bại.\n");
                    continue;
                }
                file_path[strcspn(file_path, "\n")] = 0;

                upload_file(file_sock, file_path, receiver, is_group == 2);
            } else if (file_choice == 2) {
                char file_name[BUFFER_SIZE];
                char save_path[BUFFER_SIZE];
                printf("Nhập tên file cần tải xuống: ");
                if (fgets(file_name, sizeof(file_name), stdin) == NULL) {
                    printf("Đọc tên file thất bại.\n");
                    continue;
                }
                file_name[strcspn(file_name, "\n")] = 0;

                printf("Nhập đường dẫn để lưu file: ");
                if (fgets(save_path, sizeof(save_path), stdin) == NULL) {
                    printf("Đọc đường dẫn lưu file thất bại.\n");
                    continue;
                }
                save_path[strcspn(save_path, "\n")] = 0;

                download_file(file_sock, file_name, save_path);
            } else if (file_choice == 3) {
                char dir_path[BUFFER_SIZE];
                char receiver[USERNAME_BUFFER];
                int is_group;
                printf("1. Gửi tới người dùng\n2. Gửi tới nhóm\nLựa chọn: ");
                if (scanf("%d", &is_group) != 1) {
                    printf("Lựa chọn không hợp lệ.\n");
                    while (getchar() != '\n'); // Xóa bộ đệm nhập
                    continue;
                }
                getchar();

                printf("Nhập tên người dùng hoặc tên nhóm: ");
                if (fgets(receiver, sizeof(receiver), stdin) == NULL) {
                    printf("Đọc tên người nhận thất bại.\n");
                    continue;
                }
                receiver[strcspn(receiver, "\n")] = 0;

                printf("Nhập đường dẫn thư mục: ");
                if (fgets(dir_path, sizeof(dir_path), stdin) == NULL) {
                    printf("Đọc đường dẫn thư mục thất bại.\n");
                    continue;
                }
                dir_path[strcspn(dir_path, "\n")] = 0;

                upload_directory(file_sock, dir_path, receiver, is_group == 2);
            } else if (file_choice == 4) {
                char dir_name[BUFFER_SIZE];
                char save_path[BUFFER_SIZE];
                printf("Nhập tên thư mục cần tải xuống: ");
                if (fgets(dir_name, sizeof(dir_name), stdin) == NULL) {
                    printf("Đọc tên thư mục thất bại.\n");
                    continue;
                }
                dir_name[strcspn(dir_name, "\n")] = 0;

                printf("Nhập đường dẫn để lưu thư mục: ");
                if (fgets(save_path, sizeof(save_path), stdin) == NULL) {
                    printf("Đọc đường dẫn lưu thư mục thất bại.\n");
                    continue;
                }
                save_path[strcspn(save_path, "\n")] = 0;

                download_directory(file_sock, dir_name, save_path);
            } else if (file_choice == 5) {
                continue;
            } else {
                printf("Lựa chọn không hợp lệ.\n");
            }
        } else if (main_choice == 4) {
            // Tìm Kiếm File
            char query[BUFFER_SIZE];
            printf("Nhập từ khóa tìm kiếm: ");
            if (fgets(query, sizeof(query), stdin) == NULL) {
                printf("Đọc từ khóa tìm kiếm thất bại.\n");
                continue;
            }
            query[strcspn(query, "\n")] = 0;

            search_files(file_sock, query);
        } else if (main_choice == 5) {
            printf("Đang thoát...\n");
            close(chat_sock);
            close(group_sock);
            close(file_sock);
            exit(0);
        } else {
            printf("Lựa chọn không hợp lệ.\n");
        }
    }

    close(chat_sock);
    close(group_sock);
    close(file_sock);
    return 0;
}

// client/src/utils.c

#include "utils.h"
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

void handle_error(const char *message) {
    perror(message);
    exit(EXIT_FAILURE);
}

int send_all(int sock, const void *buffer, size_t length) {
    size_t totalSent = 0;
    const char *ptr = buffer;
    while (totalSent < length) {
        ssize_t bytesSent = send(sock, ptr + totalSent, length - totalSent, 0);
        if (bytesSent <= 0) {
            return -1; // Lỗi khi gửi
        }
        totalSent += bytesSent;
    }
    return 0; // Gửi thành công
}

int recv_all(int sock, void *buffer, size_t length) {
    size_t totalReceived = 0;
    char *ptr = buffer;
    while (totalReceived < length) {
        ssize_t bytesReceived = recv(sock, ptr + totalReceived, length - totalReceived, 0);
        if (bytesReceived <= 0) {
            return -1; // Lỗi hoặc kết nối đóng
        }
        totalReceived += bytesReceived;
    }
    return totalReceived;
}

uint64_t htonll(uint64_t value) {
    int num = 1;
    if (*(char *)&num == 1) {
        // Little endian
        uint32_t high_part = htonl((uint32_t)(value >> 32));
        uint32_t low_part = htonl((uint32_t)(value & 0xFFFFFFFFLL));
        return (((uint64_t)high_part) << 32) | low_part;
    } else {
        // Big endian
        return value;
    }
}

uint64_t ntohll(uint64_t value) {
    int num = 1;
    if (*(char *)&num == 1) {
        // Little endian
        uint32_t high_part = ntohl((uint32_t)(value >> 32));
        uint32_t low_part = ntohl((uint32_t)(value & 0xFFFFFFFFLL));
        return (((uint64_t)high_part) << 32) | low_part;
    } else {
        // Big endian
        return value;
    }
}

// server/src/chat.c

#include "../include/chat.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define BUFFER_SIZE 1024

void handle_private_message(DBConnection *db, int sender_id, const char *recipient_username, const char *message, int client_sock) {
    // Tìm user_id của người nhận
    char query[BUFFER_SIZE];
    snprintf(query, sizeof(query), "SELECT id FROM users WHERE username='%s'", recipient_username);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        send_response(client_sock, "Recipient not found.\n");
        return;
    }

    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        send_response(client_sock, "Recipient not found.\n");
        mysql_free_result(res);
        return;
    }

    int recipient_id = atoi(row[0]);
    mysql_free_result(res);

    // Lưu tin nhắn vào cơ sở dữ liệu
    snprintf(query, sizeof(query),
             "INSERT INTO messages (sender_id, receiver_id, message) VALUES (%d, %d, '%s')",
             sender_id, recipient_id, message);
    if (execute_query(db, query) == NULL) {
        send_response(client_sock, "Failed to send message.\n");
        return;
    }

    // TODO: Gửi tin nhắn tới người nhận nếu họ đang online
    // Bạn cần triển khai cơ chế quản lý các kết nối đang online để tìm socket của người nhận
    // Ví dụ: bạn có thể sử dụng một danh sách các client đang kết nối và tìm socket dựa trên user_id

    send_response(client_sock, "Message sent successfully.\n");
}

void send_message_to_user(int recipient_sock, const char *message) {
    send(recipient_sock, message, strlen(message), 0);
}

// server/src/db.c

#include "../include/db.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Hàm kết nối đến cơ sở dữ liệu
int connect_db(DBConnection *db, const char *host, const char *user, const char *password, const char *dbname) {
    db->conn = mysql_init(NULL);
    if (db->conn == NULL) {
        fprintf(stderr, "mysql_init() failed\n");
        return EXIT_FAILURE;
    }

    if (mysql_real_connect(db->conn, host, user, password, dbname, 0, NULL, 0) == NULL) {
        fprintf(stderr, "mysql_real_connect() failed: %s\n", mysql_error(db->conn));
        mysql_close(db->conn);
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}

// Hàm thực thi câu lệnh SQL (INSERT, UPDATE, DELETE)
MYSQL_RES *execute_query(DBConnection *db, const char *query) {
    if (mysql_query(db->conn, query)) {
        fprintf(stderr, "MySQL query error: %s\n", mysql_error(db->conn));
        return NULL;
    }
    MYSQL_RES *res = mysql_store_result(db->conn);
    if (res == NULL) {
        if (mysql_field_count(db->conn) == 0) {
            // Truy vấn không trả về dữ liệu (non-SELECT), thành công
            return (MYSQL_RES *)1; // Đánh dấu thành công
        } else {
            // Lỗi khi lấy kết quả
            fprintf(stderr, "MySQL store result failed: %s\n", mysql_error(db->conn));
            return NULL;
        }
    }
    return res;
}

// Hàm lấy kết quả truy vấn (SELECT)
int fetch_query_result(DBConnection *db, const char *query) {
    if (mysql_query(db->conn, query)) {
        fprintf(stderr, "QUERY FAILED: %s\n", mysql_error(db->conn));
        return EXIT_FAILURE;
    }

    db->res = mysql_store_result(db->conn);
    if (db->res == NULL) {
        fprintf(stderr, "STORE RESULT FAILED: %s\n", mysql_error(db->conn));
        return EXIT_FAILURE;
    }

    // In kết quả truy vấn ra (nếu cần thiết)
    /*
    while ((db->row = mysql_fetch_row(db->res)) != NULL) {
        for (int i = 0; i < mysql_num_fields(db->res); i++) {
            printf("%s ", db->row[i] ? db->row[i] : "NULL");
        }
        printf("\n");
    }
    */
    return EXIT_SUCCESS;
}

// Hàm đóng kết nối cơ sở dữ liệu
void close_db(DBConnection *db) {
    if (db->conn) {
        mysql_close(db->conn);
    }
}

// server/src/file.c

#include "../include/file.h"
#include "../include/utils.h"
#include "../include/group.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>

#define BUFFER_SIZE 1024

// Hàm tải lên file
int upload_file(DBConnection *db, int sender_id, const char *receiver_username, const char *file_name, const char *file_type, const char *file_path, int is_group) {
    char query[BUFFER_SIZE];
    int receiver_id = -1;
    int group_id = -1;

    if (is_group) {
        // Lấy group_id từ tên nhóm
        snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", receiver_username);
        MYSQL_RES *res = execute_query(db, query);
        if (res == NULL) {
            return -1;
        }
        MYSQL_ROW row = mysql_fetch_row(res);
        if (row == NULL) {
            mysql_free_result(res);
            return -1;
        }
        group_id = atoi(row[0]);
        mysql_free_result(res);
    } else {
        // Lấy user_id từ tên người nhận
        snprintf(query, sizeof(query), "SELECT id FROM users WHERE username='%s'", receiver_username);
        MYSQL_RES *res = execute_query(db, query);
        if (res == NULL) {
            return -1;
        }
        MYSQL_ROW row = mysql_fetch_row(res);
        if (row == NULL) {
            mysql_free_result(res);
            return -1;
        }
        receiver_id = atoi(row[0]);
        mysql_free_result(res);
    }

    // Lưu thông tin file vào cơ sở dữ liệu
    if (is_group) {
        snprintf(query, sizeof(query),
                 "INSERT INTO files (sender_id, group_id, file_name, file_type, file_path) VALUES (%d, %d, '%s', '%s', '%s')",
                 sender_id, group_id, file_name, file_type, file_path);
    } else {
        snprintf(query, sizeof(query),
                 "INSERT INTO files (sender_id, receiver_id, file_name, file_type, file_path) VALUES (%d, %d, '%s', '%s', '%s')",
                 sender_id, receiver_id, file_name, file_type, file_path);
    }

    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return 0; // Thành công
}

// Hàm tải xuống file
int download_file(DBConnection *db, int sender_id, const char *file_name, char *file_path, size_t path_size) {
    char query[BUFFER_SIZE];
    snprintf(query,
             sizeof(query),
             "SELECT file_path FROM files WHERE file_name='%s' AND (receiver_id=%d OR group_id IN (SELECT group_id FROM group_members WHERE user_id=%d))",
             file_name, sender_id, sender_id);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        strncpy(file_path, "File not found.\n", path_size);
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        strncpy(file_path, "File not found.\n", path_size);
        mysql_free_result(res);
        return -1;
    }
    strncpy(file_path, row[0], path_size - 1);
    file_path[path_size - 1] = '\0';
    mysql_free_result(res);

    return 0;
}

// Hàm tìm kiếm file
int search_files(DBConnection *db, const char *query_str, char *result, size_t result_size) {
    char query[BUFFER_SIZE];
    snprintf(query,
             sizeof(query),
             "SELECT file_name FROM files WHERE file_name LIKE '%%%s%%'",
             query_str);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        strncpy(result, "Không thể tìm kiếm file.\n", result_size);
        return -1;
    }

    MYSQL_ROW row;
    size_t offset = 0;
    while ((row = mysql_fetch_row(res)) != NULL) {
        offset += snprintf(result + offset, result_size - offset, "%s\n", row[0]);
        if (offset >= result_size) break;
    }
    mysql_free_result(res);

    if (offset == 0) {
        strncpy(result, "Không tìm thấy file nào phù hợp.\n", result_size);
    }

    return 0;
}

// server/src/group.c

#include "../include/group.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 1024

int create_group(DBConnection *db, const char *group_name, int creator_id) {
    char query[BUFFER_SIZE];
    int group_id = -1;

    // Tạo nhóm mới
    snprintf(query, sizeof(query),
             "INSERT INTO chat_groups (group_name, creator_id) VALUES ('%s', %d)",
             group_name, creator_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    // Lấy ID của nhóm vừa tạo
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1;
    }
    group_id = atoi(row[0]);
    mysql_free_result(res);

    // Thêm người tạo vào nhóm với vai trò admin
    snprintf(query, sizeof(query),
             "INSERT INTO group_members (group_id, user_id, role) VALUES (%d, %d, 'admin')",
             group_id, creator_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return group_id;
}

int join_group(DBConnection *db, const char *group_name, int user_id) {
    char query[BUFFER_SIZE];
    int group_id = -1;

    // Lấy group_id từ tên nhóm
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Nhóm không tồn tại
    }
    group_id = atoi(row[0]);
    mysql_free_result(res);

    // Kiểm tra xem người dùng đã là thành viên chưa
    snprintf(query, sizeof(query),
             "SELECT 1 FROM group_members WHERE group_id=%d AND user_id=%d",
             group_id, user_id);
    res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    row = mysql_fetch_row(res);
    if (row != NULL) {
        mysql_free_result(res);
        return -2; // Đã là thành viên
    }
    mysql_free_result(res);

    // Thêm người dùng vào nhóm với vai trò member
    snprintf(query, sizeof(query),
             "INSERT INTO group_members (group_id, user_id, role) VALUES (%d, %d, 'member')",
             group_id, user_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return group_id;
}

int leave_group(DBConnection *db, const char *group_name, int user_id) {
    char query[BUFFER_SIZE];
    int group_id = -1;

    // Lấy group_id từ tên nhóm
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Nhóm không tồn tại
    }
    group_id = atoi(row[0]);
    mysql_free_result(res);

    // Xóa người dùng khỏi nhóm
    snprintf(query, sizeof(query),
             "DELETE FROM group_members WHERE group_id=%d AND user_id=%d",
             group_id, user_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return 0; // Thành công
}

int add_member_to_group(DBConnection *db, const char *group_name, const char *member_username) {
    char query[BUFFER_SIZE];
    int group_id = -1;
    int member_id = -1;

    // Lấy group_id từ tên nhóm
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Nhóm không tồn tại
    }
    group_id = atoi(row[0]);
    mysql_free_result(res);

    // Lấy user_id của thành viên cần thêm
    snprintf(query, sizeof(query), "SELECT id FROM users WHERE username='%s'", member_username);
    res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Người dùng không tồn tại
    }
    member_id = atoi(row[0]);
    mysql_free_result(res);

    // Kiểm tra xem người dùng đã là thành viên chưa
    snprintf(query, sizeof(query),
             "SELECT 1 FROM group_members WHERE group_id=%d AND user_id=%d",
             group_id, member_id);
    res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    row = mysql_fetch_row(res);
    if (row != NULL) {
        mysql_free_result(res);
        return -2; // Đã là thành viên
    }
    mysql_free_result(res);

    // Thêm người dùng vào nhóm với vai trò member
    snprintf(query, sizeof(query),
             "INSERT INTO group_members (group_id, user_id, role) VALUES (%d, %d, 'member')",
             group_id, member_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return 0; // Thành công
}

int remove_member_from_group(DBConnection *db, const char *group_name, const char *member_username) {
    char query[BUFFER_SIZE];
    int group_id = -1;
    int member_id = -1;

    // Lấy group_id từ tên nhóm
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Nhóm không tồn tại
    }
    group_id = atoi(row[0]);
    mysql_free_result(res);

    // Lấy user_id của thành viên cần xóa
    snprintf(query, sizeof(query), "SELECT id FROM users WHERE username='%s'", member_username);
    res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Người dùng không tồn tại
    }
    member_id = atoi(row[0]);
    mysql_free_result(res);

    // Xóa người dùng khỏi nhóm
    snprintf(query, sizeof(query),
             "DELETE FROM group_members WHERE group_id=%d AND user_id=%d",
             group_id, member_id);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    return 0; // Thành công
}

int list_user_groups(DBConnection *db, int user_id, char *result, size_t result_size) {
    char query[BUFFER_SIZE];
    snprintf(query, sizeof(query),
             "SELECT g.group_name FROM chat_groups g "
             "JOIN group_members gm ON g.id = gm.group_id "
             "WHERE gm.user_id = %d", user_id);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        strncpy(result, "Không thể lấy danh sách nhóm.\n", result_size);
        return -1;
    }

    MYSQL_ROW row;
    size_t offset = 0;
    while ((row = mysql_fetch_row(res)) != NULL) {
        offset += snprintf(result + offset, result_size - offset, "%s\n", row[0]);
        if (offset >= result_size) break;
    }
    mysql_free_result(res);

    if (offset == 0) {
        strncpy(result, "Bạn chưa tham gia nhóm nào.\n", result_size);
    }

    return 0;
}

int list_all_users(DBConnection *db, char *result, size_t result_size) {
    char query[BUFFER_SIZE];
    snprintf(query, sizeof(query), "SELECT username FROM users");
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        strncpy(result, "Không thể lấy danh sách người dùng.\n", result_size);
        return -1;
    }

    MYSQL_ROW row;
    size_t offset = 0;
    while ((row = mysql_fetch_row(res)) != NULL) {
        offset += snprintf(result + offset, result_size - offset, "%s\n", row[0]);
        if (offset >= result_size) break;
    }
    mysql_free_result(res);

    if (offset == 0) {
        strncpy(result, "Không có người dùng nào.\n", result_size);
    }

    return 0;
}

int send_group_message(DBConnection *db, int sender_id, const char *group_name, const char *message) {
    char query[BUFFER_SIZE];
    snprintf(query, sizeof(query), "SELECT id FROM chat_groups WHERE group_name='%s'", group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Nhóm không tồn tại
    }
    int group_id = atoi(row[0]);
    mysql_free_result(res);

    // Kiểm tra nếu người gửi là thành viên của nhóm
    snprintf(query, sizeof(query),
             "SELECT 1 FROM group_members WHERE group_id=%d AND user_id=%d",
             group_id, sender_id);
    res = execute_query(db, query);
    if (res == NULL) {
        return -1;
    }
    row = mysql_fetch_row(res);
    if (row == NULL) {
        mysql_free_result(res);
        return -1; // Người gửi không phải thành viên
    }
    mysql_free_result(res);

    // Lưu tin nhắn vào cơ sở dữ liệu
    snprintf(query, sizeof(query),
             "INSERT INTO messages (sender_id, group_id, message) VALUES (%d, %d, '%s')",
             sender_id, group_id, message);
    if (execute_query(db, query) == NULL) {
        return -1;
    }

    // Gửi tin nhắn tới tất cả thành viên trong nhóm (ngoại trừ người gửi)
    // Bạn cần triển khai danh sách các client đang kết nối để tìm và gửi tin nhắn

    // Ví dụ:
    // send_message_to_user(recipient_sock, message);

    return 0;
}

int list_group_messages(DBConnection *db, const char *group_name, char *result, size_t result_size) {
    char query[BUFFER_SIZE];
    snprintf(query, sizeof(query),
             "SELECT u.username, m.message, m.created_at FROM messages m "
             "JOIN users u ON m.sender_id = u.id "
             "JOIN chat_groups g ON m.group_id = g.id "
             "WHERE g.group_name = '%s' ORDER BY m.created_at ASC",
             group_name);
    MYSQL_RES *res = execute_query(db, query);
    if (res == NULL) {
        strncpy(result, "Không thể lấy tin nhắn nhóm.\n", result_size);
        return -1;
    }

    MYSQL_ROW row;
    size_t offset = 0;
    while ((row = mysql_fetch_row(res)) != NULL) {
        offset += snprintf(result + offset, result_size - offset, "[%s] %s: %s\n", row[2], row[0], row[1]);
        if (offset >= result_size) break;
    }
    mysql_free_result(res);

    if (offset == 0) {
        strncpy(result, "Không có tin nhắn trong nhóm này.\n", result_size);
    }

    return 0;
}

// server/src/main.c

#include "../include/db.h"
#include "../include/chat.h"
#include "../include/group.h"
#include "../include/file.h"
#include "../include/utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <netinet/in.h>

#define BUFFER_SIZE 1024
#define CHAT_PORT 8085
#define GROUP_PORT 8086
#define FILE_PORT 8087

typedef struct {
    int sock;
    int id;
    char username[50];
} Client;

DBConnection db;

// Hàm xử lý kết nối của từng client
void *handle_client(void *arg) {
    Client *client = (Client *)arg;
    char buffer[BUFFER_SIZE];
    memset(buffer, 0, sizeof(buffer));

    // Nhận yêu cầu đăng ký hoặc đăng nhập
    ssize_t bytesReceived = recv(client->sock, buffer, sizeof(buffer) - 1, 0);
    if (bytesReceived <= 0) {
        close(client->sock);
        free(client);
        pthread_exit(NULL);
    }
    buffer[bytesReceived] = '\0';

    // Xử lý đăng ký hoặc đăng nhập
    if (strncmp(buffer, "REGISTER", 8) == 0) {
        char username[50], password[50], email[100];
        // Đảm bảo rằng bạn có đủ dữ liệu trước khi sử dụng sscanf
        int scanned = sscanf(buffer + 9, "%49s %49s %99s", username, password, email);
        if (scanned != 3) {
            send_response(client->sock, "RegisterFailed: Invalid data format.\n");
            close(client->sock);
            free(client);
            pthread_exit(NULL);
        }

        // Kiểm tra xem người dùng đã tồn tại chưa
        char query[BUFFER_SIZE];
        snprintf(query, sizeof(query), "SELECT id FROM users WHERE username='%s'", username);
        MYSQL_RES *res = execute_query(&db, query);
        if (res != NULL && mysql_num_rows(res) > 0) {
            send_response(client->sock, "UserExists\n");
            mysql_free_result(res);
        } else {
            if (res != NULL && res != (MYSQL_RES *)1) {
                mysql_free_result(res);
            }
            // Thêm người dùng vào cơ sở dữ liệu
            snprintf(query, sizeof(query), 
                     "INSERT INTO users (username, password, email, status) VALUES ('%s', '%s', '%s', 'offline')", 
                     username, password, email);
            MYSQL_RES *insert_res = execute_query(&db, query);
            if (insert_res == NULL) {
                send_response(client->sock, "RegisterFailed\n");
            } else {
                // Kiểm tra xem insert_res là (MYSQL_RES *)1 hay không
                if (insert_res == (MYSQL_RES *)1) {
                    // Lấy ID người dùng vừa đăng ký
                    int user_id = mysql_insert_id(db.conn);
                    client->id = user_id;
                    strncpy(client->username, username, sizeof(client->username) - 1);
                    send_response(client->sock, "RegisterSuccess\n");
                    printf("User %s đã đăng ký.\n", username);
                } else {
                    // Trường hợp này không nên xảy ra với INSERT
                    send_response(client->sock, "RegisterFailed\n");
                }
            }
        }
    } 
    else if (strncmp(buffer, "LOGIN", 5) == 0) {
        char username[50], password[50];
        int scanned = sscanf(buffer + 6, "%49s %49s", username, password);
        if (scanned != 2) {
            send_response(client->sock, "LoginFailed: Invalid data format.\n");
            close(client->sock);
            free(client);
            pthread_exit(NULL);
        }

        // Kiểm tra thông tin đăng nhập
        char query[BUFFER_SIZE];
        snprintf(query, sizeof(query), 
                 "SELECT id FROM users WHERE username='%s' AND password='%s'", 
                 username, password);
        MYSQL_RES *res = execute_query(&db, query);
        if (res != NULL && mysql_num_rows(res) > 0) {
            MYSQL_ROW row = mysql_fetch_row(res);
            int user_id = atoi(row[0]);
            client->id = user_id;
            strncpy(client->username, username, sizeof(client->username) - 1);
            send_response(client->sock, "LoginSuccess\n");

            // Cập nhật trạng thái online
            snprintf(query, sizeof(query), "UPDATE users SET status='online' WHERE id=%d", user_id);
            execute_query(&db, query);

            printf("User %s đã đăng nhập.\n", username);
            mysql_free_result(res);
        } else {
            send_response(client->sock, "LoginFailed\n");
            if (res != NULL) {
                mysql_free_result(res);
            }
            close(client->sock);
            free(client);
            pthread_exit(NULL);
        }
    } 
    else {
        send_response(client->sock, "InvalidCommand\n");
        close(client->sock);
        free(client);
        pthread_exit(NULL);
    }

    // Vòng lặp xử lý các lệnh sau khi đăng nhập hoặc đăng ký thành công
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        bytesReceived = recv(client->sock, buffer, sizeof(buffer) - 1, 0);
        if (bytesReceived <= 0) {
            // Cập nhật trạng thái offline
            char update_query[BUFFER_SIZE];
            snprintf(update_query, sizeof(update_query), 
                     "UPDATE users SET status='offline' WHERE id=%d", client->id);
            execute_query(&db, update_query);

            printf("User %s đã ngắt kết nối.\n", client->username);
            close(client->sock);
            free(client);
            pthread_exit(NULL);
        }
        buffer[bytesReceived] = '\0';

        // Xử lý các lệnh
        if (strncmp(buffer, "PRIVATE", 7) == 0) {
            char recipient[50];
            char message[BUFFER_SIZE];
            int scanned = sscanf(buffer + 8, "%49s %[^\n]", recipient, message);
            if (scanned < 2) {
                send_response(client->sock, "PrivateMessageFailed: Invalid format.\n");
                continue;
            }
            handle_private_message(&db, client->id, recipient, message, client->sock);
        } 
        else if (strncmp(buffer, "CREATE_GROUP", 12) == 0) {
            char group_name[50];
            int scanned = sscanf(buffer + 13, "%49s", group_name);
            if (scanned != 1) {
                send_response(client->sock, "CreateGroupFailed: Invalid format.\n");
                continue;
            }
            int group_id = create_group(&db, group_name, client->id);
            if (group_id == -1) {
                send_response(client->sock, "CreateGroupFailed\n");
            } else {
                send_response(client->sock, "GroupCreated\n");
            }
        } 
        else if (strncmp(buffer, "JOIN_GROUP", 10) == 0) {
            char group_name[50];
            int scanned = sscanf(buffer + 11, "%49s", group_name);
            if (scanned != 1) {
                send_response(client->sock, "JoinGroupFailed: Invalid format.\n");
                continue;
            }
            int group_id = join_group(&db, group_name, client->id);
            if (group_id == -1) {
                send_response(client->sock, "JoinGroupFailed\n");
            } else if (group_id == -2) {
                send_response(client->sock, "AlreadyMember\n");
            } else {
                send_response(client->sock, "JoinedGroup\n");
            }
        } 
        else if (strncmp(buffer, "LEAVE_GROUP", 11) == 0) {
            char group_name[50];
            int scanned = sscanf(buffer + 12, "%49s", group_name);
            if (scanned != 1) {
                send_response(client->sock, "LeaveGroupFailed: Invalid format.\n");
                continue;
            }
            if (leave_group(&db, group_name, client->id) == 0) {
                send_response(client->sock, "LeftGroup\n");
            } else {
                send_response(client->sock, "LeaveGroupFailed\n");
            }
        } 
        else if (strncmp(buffer, "ADD_MEMBER", 10) == 0) {
            char group_name[50], member_username[50];
            int scanned = sscanf(buffer + 11, "%49s %49s", group_name, member_username);
            if (scanned != 2) {
                send_response(client->sock, "AddMemberFailed: Invalid format.\n");
                continue;
            }
            int add_result = add_member_to_group(&db, group_name, member_username);
            if (add_result == 0) {
                send_response(client->sock, "AddMemberSuccess\n");
            } else if (add_result == -2) {
                send_response(client->sock, "MemberAlreadyExists\n");
            } else {
                send_response(client->sock, "AddMemberFailed\n");
            }
        } 
        else if (strncmp(buffer, "REMOVE_MEMBER", 13) == 0) {
            char group_name[50], member_username[50];
            int scanned = sscanf(buffer + 14, "%49s %49s", group_name, member_username);
            if (scanned != 2) {
                send_response(client->sock, "RemoveMemberFailed: Invalid format.\n");
                continue;
            }
            if (remove_member_from_group(&db, group_name, member_username) == 0) {
                send_response(client->sock, "RemoveMemberSuccess\n");
            } else {
                send_response(client->sock, "RemoveMemberFailed\n");
            }
        } 
        else if (strncmp(buffer, "SEND", 4) == 0) {
            char group_name[50];
            char message[BUFFER_SIZE];
            int scanned = sscanf(buffer + 5, "%49s %[^\n]", group_name, message);
            if (scanned < 2) {
                send_response(client->sock, "GroupMessageFailed: Invalid format.\n");
                continue;
            }
            if (send_group_message(&db, client->id, group_name, message) == 0) {
                send_response(client->sock, "GroupMessageSent\n");
            } else {
                send_response(client->sock, "GroupMessageFailed\n");
            }
        } 
        else if (strncmp(buffer, "LIST_GROUPS", 11) == 0) {
            char groups[BUFFER_SIZE];
            if (list_user_groups(&db, client->id, groups, sizeof(groups)) == 0) {
                send(client->sock, groups, strlen(groups), 0);
            } else {
                send_response(client->sock, "ListGroupsFailed\n");
            }
        } 
        else if (strncmp(buffer, "LIST_USERS", 10) == 0) {
            char users[BUFFER_SIZE];
            if (list_all_users(&db, users, sizeof(users)) == 0) {
                send(client->sock, users, strlen(users), 0);
            } else {
                send_response(client->sock, "ListUsersFailed\n");
            }
        } 
        else if (strncmp(buffer, "SEARCH", 6) == 0) {
            char query_str[BUFFER_SIZE];
            int scanned = sscanf(buffer + 7, "%1023s", query_str);
            if (scanned != 1) {
                send_response(client->sock, "SearchFailed: Invalid format.\n");
                continue;
            }
            char search_results[BUFFER_SIZE];
            if (search_files(&db, query_str, search_results, sizeof(search_results)) == 0) {
                send(client->sock, search_results, strlen(search_results), 0);
                send_response(client->sock, "END_OF_RESULTS\n");
            } else {
                send_response(client->sock, "SearchFailed\n");
            }
        } 
        else {
            send_response(client->sock, "UnknownCommand\n");
        }
    }

    close(client->sock);
    free(client);
    pthread_exit(NULL);
}

int main() {
    // Kết nối đến cơ sở dữ liệu
    if (connect_db(&db, "localhost", "root", "transyhieu123", "chat_app") != EXIT_SUCCESS) {
        fprintf(stderr, "Failed to connect to database.\n");
        exit(EXIT_FAILURE);
    }

    int server_sock, new_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Tạo socket TCP cho chat
    if ((server_sock = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        handle_error("Socket failed");
    }

    // Thiết lập địa chỉ
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(CHAT_PORT);

    // Gắn socket với địa chỉ
    if (bind(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        handle_error("Bind failed");
    }

    // Lắng nghe kết nối
    if (listen(server_sock, 10) < 0) {
        handle_error("Listen failed");
    }

    printf("Server đang lắng nghe trên cổng %d...\n", CHAT_PORT);

    while (1) {
        if ((new_sock = accept(server_sock, (struct sockaddr *)&client_addr, &addr_len)) < 0) {
            perror("Accept failed");
            continue;
        }

        // Tạo client mới
        Client *client = (Client *)malloc(sizeof(Client));
        if (client == NULL) {
            perror("Malloc failed");
            close(new_sock);
            continue;
        }
        client->sock = new_sock;
        client->id = -1;
        memset(client->username, 0, sizeof(client->username));

        // Tạo thread để xử lý client
        pthread_t thread_id;
        if (pthread_create(&thread_id, NULL, handle_client, (void *)client) != 0) {
            perror("pthread_create failed");
            close(new_sock);
            free(client);
            continue;
        }
        pthread_detach(thread_id);
    }

    close(server_sock);
    close_db(&db);
    return 0;
}

// server/src/utils.c

#include "../include/utils.h"
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

void handle_error(const char *message) {
    perror(message);
    exit(EXIT_FAILURE);
}

int send_all(int sock, const void *buffer, size_t length) {
    size_t totalSent = 0;
    const char *ptr = buffer;
    while (totalSent < length) {
        ssize_t bytesSent = send(sock, ptr + totalSent, length - totalSent, 0);
        if (bytesSent <= 0) {
            return -1; // Lỗi khi gửi
        }
        totalSent += bytesSent;
    }
    return 0; // Gửi thành công
}

int recv_all(int sock, void *buffer, size_t length) {
    size_t totalReceived = 0;
    char *ptr = buffer;
    while (totalReceived < length) {
        ssize_t bytesReceived = recv(sock, ptr + totalReceived, length - totalReceived, 0);
        if (bytesReceived <= 0) {
            return -1; // Lỗi hoặc kết nối đóng
        }
        totalReceived += bytesReceived;
    }
    return totalReceived;
}

uint64_t htonll(uint64_t value) {
    int num = 1;
    if (*(char *)&num == 1) {
        // Little endian
        uint32_t high_part = htonl((uint32_t)(value >> 32));
        uint32_t low_part = htonl((uint32_t)(value & 0xFFFFFFFFLL));
        return (((uint64_t)high_part) << 32) | low_part;
    } else {
        // Big endian
        return value;
    }
}

uint64_t ntohll(uint64_t value) {
    int num = 1;
    if (*(char *)&num == 1) {
        // Little endian
        uint32_t high_part = ntohl((uint32_t)(value >> 32));
        uint32_t low_part = ntohl((uint32_t)(value & 0xFFFFFFFFLL));
        return (((uint64_t)high_part) << 32) | low_part;
    } else {
        // Big endian
        return value;
    }
}

void send_response(int sock, const char *message) {
    send(sock, message, strlen(message), 0);
}
đây là toàn bộ code chính của tôi, tôi muốn bạn xem lại vì sao tôi khi tôi đăng ký, tạo tài khoản thành công và có cập nhật trong database, tuy nhiên là xuất hiện lỗi "Kết nối đến server group thất bại: Connection refused", và đưa ra giải pháp tốt nhất 

